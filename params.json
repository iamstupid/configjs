{"name":"Configjs","tagline":"Function argument checker","body":"#configjs\r\n>configjs is a powerful tool to make overload functions   \r\n\r\nEveryone knows `JavaScript` doesn't allow function overload, so the traditional way to avoid it is to use `JavaScript arguments` or check argument type. It is unscientific and it makes the code hard to read and understand (just think about you are reading a open source library with `if(typeof)`s everywhere and function redirects(a famous example is **jQuery**))   \r\n```javascript\r\n//a piece of bad code\r\nfunction help(){\r\n  if(arguments.length===0){\r\n    print_help_message();\r\n  }\r\n  var k=arguments[0];\r\n  if(typeof k===\"object\"){\r\n    if(typeof k.help===\"undefined\"){\r\n      print(helpMap(k));\r\n    }else{\r\n      print(k.help);\r\n    }\r\n  }\r\n  if(typeof k===\"function\"){\r\n    print(helpFunctionMap(k));\r\n  }\r\n}\r\n```\r\nThe code is unreadable!    \r\n>Why I should write like this?    \r\n\r\nThe answer is use Object to send parameters in.\r\n```javascript\r\nfunction help(a){\r\n  if(a.function){\r\n    print(helpFunctionMap(a.function));return;\r\n  }\r\n  if(a.object){\r\n    print(a.object.help?a.object.help:helpMap(a.object));return;\r\n  }\r\n  if(a.var){\r\n    print(helpScope(a.var,a.module));return;\r\n  }\r\n  print_help_message();\r\n  return;\r\n}\r\n```\r\nNow the code is clear.   \r\nSo this is how I can help you to solve this.\r\n##introduce\r\n**configjs**,a `JavaScript` tool, help you to check arguments and fill them   \r\nIt can't do everything but we try the best to make its code clear and light.   \r\nWe will add a lot of functions to it and make it into a great library.\r\n##usage\r\n###argument pattern\r\nSimple include, and simple use.No dependence on other libraries, because we don't need.\r\n```javascript\r\n//usage\r\n//a tutorial\r\nfunction add(args){\r\n  var argsp={\r\n    a:[1,false],\r\n    b:[2,false]\r\n  };\r\n  args=testConfig(args,argsp);\r\n  return args.a+args.b;\r\n}\r\n//now how it outputs\r\nadd();//3\r\nadd({b:4});//5\r\nadd({a:3,b:6});//9\r\nadd(\"a=6|b=6\");//12\r\n//we simply parse strings using split method,so don't use add(\"a={a:\\\"|\\\"}\"),| will split argument list.\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}